@article{Frakes2005,
author = {Frakes, W.B. and {Kyo Kang}, Kyo},
doi = {10.1109/TSE.2005.85},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Frakes, Kyo Kang - 2005 - Software reuse research status and future.pdf:pdf},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Computer science,Finance,Index Terms- Software reuse,Productivity,Reliability engineering,Software architecture,Software engineering,Software libraries,Software quality,Software reusability,Software systems,architectures,domain engineering,finance.,generators,metrics,research,research and development,software architecture,software engineering,software metrics,software reusability,software reuse,software reuse research},
mendeley-tags = {software reuse},
month = {jul},
number = {7},
pages = {529--536},
publisher = {IEEE},
title = {{Software reuse research: status and future}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1492369},
volume = {31},
year = {2005}
}

@article{McIlroy1968,
abstract = {QUOTE: "The most important characteristic of a software components industry is that it will offer families of routines for any given job. No user of a particular member of a family should pay a penalty, in unwanted generality, for the fact that he is employing a standard model routine. In other words, the purchaser of a component from a family will choose one tailored to his exact needs. He will consult a catalogue offering routines in varying degrees of precision, robustness, time-space performance, and generality. He will be confident that each routine in the family is of high quality - reliable and efficient. He will expect the routine to be intelligible, doubtless expressed in a higher level language appropriate to the purpose of the component, though not necessarily instantly compilable in any processor he has for his machine. He will expect families of routines to be constructed on rational principles so that families fit together as building blocks. In short, he should be able safely to regard components as black boxes."},
author = {McIlroy, M.D.},
journal = {Software Engineering: Report on Conference Sponsored by NATO},
keywords = {- industrialization model for programming,component factory,software components as black boxes,software reuse,taking signals from mass production methods.  mana},
mendeley-tags = {software reuse},
pages = {138--155},
title = {{Mass Produced Software Components}},
year = {1968}
}

@inproceedings{Stroustrup,
author = {Stroustrup, B.},
booktitle = {Proceedings of Fourth IEEE International Conference on Software Reuse},
doi = {10.1109/ICSR.1996.496109},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Stroustrup - Unknown - Language-technical aspects of reuse.pdf:pdf},
isbn = {0-8186-7301-X},
pages = {11--19},
publisher = {IEEE Comput. Soc. Press},
title = {{Language-technical aspects of reuse}},
url = {http://ieeexplore.ieee.org/document/496109/},
year = {1996}
}

@article{Stefi2016,
author = {Stefi, Anisa and Lang, Karl and Hess, Thomas},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Stefi, Lang, Hess - 2016 - A Contingency Perspective on External Component Reuse and Software Project Success.pdf:pdf},
journal = {AMCIS 2016 Proceedings},
keywords = {software reuse},
mendeley-tags = {software reuse},
title = {{A Contingency Perspective on External Component Reuse and Software Project Success}},
url = {http://aisel.aisnet.org/amcis2016/ITProj/Presentations/16},
year = {2016}
}

@article{Kessel2016,
author = {Kessel, Marcus and Atkinson, Colin},
doi = {10.1007/s10796-016-9685-3},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Kessel, Atkinson - 2016 - Ranking software components for reuse based on non-functional properties.pdf:pdf},
issn = {1387-3326},
journal = {Information Systems Frontiers},
keywords = {software reuse},
mendeley-tags = {software reuse},
month = {jul},
pages = {1--29},
publisher = {Springer US},
title = {{Ranking software components for reuse based on non-functional properties}},
url = {http://link.springer.com/10.1007/s10796-016-9685-3},
year = {2016}
}

@book{Ezran2002,
abstract = {Right context, software reuse promises high value to businesses that$\backslash$ndevelop software, opening the door to radical improvements in their$\backslash$nsoftware capability (productivity, cost, time to market). Attempts$\backslash$nto adopt reuse without a sound understanding of the range of issues$\backslash$ninvolved, however, can lead to expensive failure. This book is for$\backslash$nthose who are wondering whether they should adopt reuse and how,$\backslash$nand also to those who have already started to adopt it but are wondering$\backslash$nwhere they may be going wrong and how they could do better. It consistently$\backslash$nemphasizes the practical issues that influence success or failure$\backslash$nin reuse; and it offers a concise and balanced coverage of the essentials$\backslash$nof the subject, rather than going into undue depth or detail on some$\backslash$ntopics at the expense of others. It occupies the central ground between$\backslash$nbeing on the one hand an academic textbook and on the other hand$\backslash$na cookbook with ready-made recipes for exactly ``how to do it''. The$\backslash$nauthors have drawn on their extensive experience of reuse and of$\backslash$nsoftware process improvement to provide a readable and balanced coverage$\backslash$nof the subject. This book is suitable for business executives, software$\backslash$nmanagers and software developers, regardless of whatever kind of$\backslash$nsoftware or applications are developed by their organisations, and$\backslash$nwhatever the size of those organisations. A special feature of the$\backslash$nbook is the frequent use of experience notes, drawn from the real-life$\backslash$nexperience of organisations that have embarked on the reuse adventure.},
author = {Ezran, Michel and Morisio, Maurizio and Tully, C J},
booktitle = {Practitioner series,},
doi = {citeulike-article-id:3944385},
isbn = {1852335025 (pbk.) :},
keywords = {Computer software Reusability.,software reuse},
mendeley-tags = {software reuse},
pages = {xxi, 222},
title = {{Practical software reuse}},
year = {2002}
}

@article{Mili1999,
author = {Mili, A. and Yacoub, S. and Addy, E. and Mili, H.},
doi = {10.1109/52.795098},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Mili et al. - 1999 - Toward an engineering discipline of software reuse.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
number = {5},
pages = {22--31},
title = {{Toward an engineering discipline of software reuse}},
url = {http://ieeexplore.ieee.org/document/795098/},
volume = {16},
year = {1999}
}

@inproceedings{Kim1992,
author = {Kim, Y. and Stohr, E.A.},
booktitle = {Proceedings of the Twenty-Fifth Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.1992.183360},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Kim, Stohr - 1992 - Software reuse issues and research directions.pdf:pdf},
isbn = {0-8186-2420-5},
pages = {612--623 vol.4},
publisher = {IEEE},
title = {{Software reuse: issues and research directions}},
url = {http://ieeexplore.ieee.org/document/183360/},
year = {1992}
}

@article{Krueger1992,
author = {Krueger, Charles W. and W., Charles},
doi = {10.1145/130844.130856},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Krueger, W. - 1992 - Software reuse(2).pdf:pdf;:Users/morph3o/Mannheim/Thesis/Papers/Krueger, W. - 1992 - Software reuse.pdf:pdf},
issn = {03600300},
journal = {ACM Computing Surveys},
keywords = {abstraction,cognitive distance,software reuse},
month = {jun},
number = {2},
pages = {131--183},
publisher = {ACM},
title = {{Software reuse}},
url = {http://portal.acm.org/citation.cfm?doid=130844.130856},
volume = {24},
year = {1992}
}

@article{Frakes1996,
author = {Frakes, William and Terry, Carol},
doi = {10.1145/234528.234531},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Frakes, Terry - 1996 - Software reuse metrics and models(2).pdf:pdf},
issn = {03600300},
journal = {ACM Computing Surveys},
keywords = {cost-benefit analysis,definitions,economics,maturity assessment,models,object-oriented,productivity,quality,reusability,reusability assessment,reuse,reuse level,reuse library metrics,software,software reuse failure modes model},
month = {jun},
number = {2},
pages = {415--435},
publisher = {ACM},
title = {{Software reuse: metrics and models}},
url = {http://portal.acm.org/citation.cfm?doid=234528.234531},
volume = {28},
year = {1996}
}

@book{Mili2002,
abstract = {1. Software reuse and software engineering -- 2. State of the art and the practice -- 3. Aspects of software reuse -- 4. Software reuse organizations -- 5. Support services -- 6. Institutionalizing reuse -- 7. Building reusable assets: an overview -- 8. Domain analysis -- 9. Programming paradigms and reusability -- 10. A pragmatic introduction to object orientation -- 11. Abstraction and parameterization techniques in object orientation -- 12. Composition techniques in object orientation -- 13. Application frameworks -- 14. Architectural frameworks -- 15. Application engineering -- 16. Component storage and retrieval -- 17. Reusable asset integration -- 18. Software reuse metrics -- 19. Software reuse cost estimation -- 20. Software reuse return on investments -- 21. Component-based software engineering (CBSE) -- 22. Product-line engineering (PLE) -- 23. COTS based development -- Appendices -- Bibliography -- Index.},
author = {Mili, Hafedh.},
isbn = {0471398195},
pages = {636},
publisher = {Wiley},
title = {{Reuse based software engineering : techniques, organization and measurement}},
year = {2002}
}

@misc{Fowler2006,
author = {Fowler, Martin},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
title = {{Continuous Integration}},
url = {http://martinfowler.com/articles/continuousIntegration.html},
urldate = {2016-09-11},
year = {2006}
}

@article{Rejstrom2016,
author = {Rejstr{\"{o}}m, Kim},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Rejstr{\"{o}}m - 2016 - Implementing Continuous Integration in a Small Company A Case Study.pdf:pdf},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
title = {{Implementing Continuous Integration in a Small Company: A Case Study}},
year = {2016}
}

@article{Rodriguez2016,
abstract = {The software intensive industry is moving towards the adoption of a value-driven and adaptive real-time business paradigm. The traditional view of software as an item that evolves through releases every few months is being replaced by the continuous evolution of software functionality. This study aims to classify and analyse the literature related to continuous deployment in the software domain in order to scope the phenomenon, provide an overview of the state-of-the-art, investigate the scientific evidence in the reported results and identify areas suitable for further research. We conducted a systematic mapping study and classified the continuous deployment literature. The benefits and challenges related to continuous deployment were also analysed. RESULTS: The systematic mapping study includes 50 primary studies published between 2001 and 2014. An in-depth analysis of the primary studies revealed ten recurrent themes that characterize continuous deployment and provide researchers with directions for future work. In addition, a set of benefits and challenges of which practitioners may take advantage were identified. CONCLUSION: Overall, although the topic area is very promising, it is still in its infancy, thus offering a plethora of new opportunities for both researchers and software intensive companies.},
author = {Rodr{\'{i}}guez, Pilar and Haghighatkhah, Alireza and Lwakatare, Lucy Ellen and Teppola, Susanna and Suomalainen, Tanja and Eskeli, Juho and Karvonen, Teemu and Kuvaja, Pasi and Verner, June M. and Oivo, Markku},
doi = {10.1016/j.jss.2015.12.015},
journal = {Journal of Systems and Software},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
pages = {263--291},
title = {{Continuous deployment of software intensive products and services: A systematic mapping study}},
volume = {123},
year = {2016}
}

@article{Mantyla2015,
author = {M{\"{a}}ntyl{\"{a}}, Mika V. and Adams, Bram and Khomh, Foutse and Engstr{\"{o}}m, Emelie and Petersen, Kai},
doi = {10.1007/s10664-014-9338-4},
file = {:Users/morph3o/Mannheim/Thesis/Papers/M{\"{a}}ntyl{\"{a}} et al. - 2015 - On rapid releases and software testing a case study and a semi-systematic literature review.pdf:pdf},
journal = {Empirical Software Engineering},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
month = {oct},
number = {5},
pages = {1384--1425},
publisher = {Springer US},
title = {{On rapid releases and software testing: a case study and a semi-systematic literature review}},
url = {http://link.springer.com/10.1007/s10664-014-9338-4},
volume = {20},
year = {2015}
}

@inproceedings{Stahl2014,
address = {New York, New York, USA},
author = {St{\aa}hl, Daniel and Bosch, Jan},
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering - ICSE Companion 2014},
doi = {10.1145/2591062.2591186},
file = {:Users/morph3o/Mannheim/Thesis/Papers/St{\aa}hl, Bosch - 2014 - Automated software integration flows in industry a multiple-case study.pdf:pdf},
isbn = {9781450327688},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
pages = {54--63},
publisher = {ACM Press},
title = {{Automated software integration flows in industry: a multiple-case study}},
url = {http://dl.acm.org/citation.cfm?doid=2591062.2591186},
year = {2014}
}

@book{Duvall2007,
abstract = {Reduce the time between when a defect is introduced and when it is fixed by integrating your software often.For any software developer who has spent days in "integration hell," cobbling together myriad software components, Continuous Integration: Improving Software Quality and Reducing Risk illustrates how to transform integration from a necessary evil into an everyday part of the development process. The key, as the authors show, is to integrate regularly and often using continuous integration (CI) practices and techniques. The authors first examine the concept of CI and its practices from the ground up and then move on to explore other effective processes performed by CI systems, such as database integration, testing, inspection, deployment, and feedback. Through more than forty CI-related practices using application examples in different languages, readers learn that CI leads to more rapid software development, produces deployable software at every step in the development lifecycle, and reduces the time between defect introduction and detection, saving time and lowering costs. With successful implementation of CI, developers reduce risks and repetitive manual processes, and teams receive better project visibility. The book coversHow to make integration a "non-event" on your software development projectsHow to reduce the amount of repetitive processes you perform when building your softwarePractices and techniques for using CI effectively with your teamsReducing the risks of late defect discovery, low quality software, lack of visibility, and lack of deployable softwareAssessments of different CI servers and related tools on the marketThe book's companion Web site, www.integratebutton.com, provides updates and code examples.},
author = {Duvall, Paul and Matyas, Steve and Glover, Andrew},
booktitle = {Book},
isbn = {9780321336385},
pages = {336},
title = {{Continuous Integration: Improving Software Quality and Reducing Risk}},
url = {http://portal.acm.org/citation.cfm?id=1406212},
year = {2007}
}

@misc{Fowler2013,
author = {Fowler, Martin},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
title = {{Continuous Delivery}},
url = {https://martinfowler.com/bliki/ContinuousDelivery.html},
urldate = {2017-01-09},
year = {2013}
}

@inproceedings{Chen2015,
author = {Chen, Lianping},
booktitle = {2015 12th Working IEEE/IFIP Conference on Software Architecture},
doi = {10.1109/WICSA.2015.23},
isbn = {978-1-4799-1922-2},
month = {may},
pages = {131--134},
publisher = {IEEE},
title = {{Towards Architecting for Continuous Delivery}},
url = {http://ieeexplore.ieee.org/document/7158514/},
year = {2015}
}

@book{Poppendieck2003,
abstract = {Eliminate waste -- Amplify learning -- Decide as late as possible -- Deliver as fast as possible -- Empower the team -- Building integrity in -- See the whole -- Instructions and warranty.},
author = {Poppendieck, Mary (Mary B.) and Poppendieck, Thomas David.},
isbn = {0321150783},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
pages = {203},
publisher = {Addison-Wesley},
title = {{Lean software development : an agile toolkit}},
year = {2003}
}

@article{Laanti2011,
abstract = {CONTEXT
Many organizations have started to deploy agile methods, but so far there exist only a few studies on organization-wide transformations. Are agile methods here to stay? Some claim that agile software development methods are in the mainstream adoption phase in the software industry, while others hope that those are a passing fad. The assumption here is that if agile would not provide real improvement, adopters would be eager at first but turn pessimistic after putting it into practice. 

OBJECTIVE
Despite the growing amount of anecdotal evidence on the success of agile methods across a wide range of different real-life development settings, scientific studies remain scarce. Even less is known about the perception of the impacts of agile transformation when it is deployed in a very large software development environment, and whether agile methods are here to stay. This study aims to fill that gap by providing evidence from a large-scale agile transformation within Nokia. While we have yet to confirm these findings with solid quantitative data, we believe that the perception of the impacts already pinpoints the direction of the impacts of large-scale agile transformation. 

METHOD
The data were collected using a questionnaire. The population of the study contains more than 1000 respondents in seven different countries in Europe, North America, and Asia. 

RESULTS
The results reveal that most respondents agree on all accounts with the generally claimed benefits of agile methods. These benefits include higher satisfaction, a feeling of effectiveness, increased quality and transparency, increased autonomy and happiness, and earlier detection of defects. Finally, 60{\%} of respondents would not like to return to the old way of working. 

CONCLUSION
While the perception of the impact of agile methods is predominantly positive, several challenge areas were discovered. However, based on this study, agile methods are here to stay.},
author = {Laanti, Maarit and Salo, Outi and Abrahamsson, Pekka},
doi = {10.1016/j.infsof.2010.11.010},
file = {:Users/morph3o/Mannheim/Thesis/Papers/Laanti, Salo, Abrahamsson - 2011 - Agile methods rapidly replacing traditional methods at Nokia A survey of opinions on agile transforma.pdf:pdf},
journal = {Information and Software Technology},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
number = {3},
pages = {276--290},
title = {{Agile methods rapidly replacing traditional methods at Nokia: A survey of opinions on agile transformation}},
volume = {53},
year = {2011}
}

@article{Leppanen2015,
author = {Leppanen, Marko and Makinen, Simo and Pagels, Max and Eloranta, Veli-Pekka and Itkonen, Juha and Mantyla, Mika V. and Mannisto, Tomi},
doi = {10.1109/MS.2015.50},
journal = {IEEE Software},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
month = {mar},
number = {2},
pages = {64--72},
title = {{The highways and country roads to continuous deployment}},
url = {http://ieeexplore.ieee.org/document/7057604/},
volume = {32},
year = {2015}
}

@inproceedings{Neely2013,
author = {Neely, Steve and Stolt, Steve},
booktitle = {2013 Agile Conference},
doi = {10.1109/AGILE.2013.17},
isbn = {978-0-7695-5076-3},
keywords = {continuous integration},
mendeley-tags = {continuous integration},
month = {aug},
pages = {121--128},
publisher = {IEEE},
title = {{Continuous Delivery? Easy! Just Change Everything (Well, Maybe It Is Not That Easy)}},
url = {http://ieeexplore.ieee.org/document/6612887/},
year = {2013}
}

@book{Humble2010,
abstract = {One of the major aims of this book is to improve collaboration between the people responsible for delivering software. In particular, we have in mind developers, testers, systems and database administrators, and managers. We cover topics from traditional configuration management, source code control, release planning, auditing, compliance, and integration to the automation of your building, testing, and deployment processes. We also describe techniques such as automated acceptance testing, dependency management, database migration, and the creation and management of testing and production environments. Many people involved in creating software consider these activities secondary to writing code. However, in our experience they take up a great deal of time and effort, and are critical to successful software delivery. When the risks surrounding these activities are not managed adequately, they can end up costing a lot of money, often more than the cost of building the software in the first place.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Humble, Jezz and Farley, David},
booktitle = {Continuous delivery},
doi = {10.1007/s13398-014-0173-7.2},
eprint = {arXiv:1011.1669v3},
isbn = {978-0-321-60191-9},
issn = {1098-6596},
pages = {497},
pmid = {25246403},
title = {{Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation}},
year = {2010}
}

@book{Booch2007,
abstract = {In this eagerly awaited second edition, Grady Booch draws upon the rich and varied results of those projects and offers improved methods for object development and a new, unified notation. With numerous examples implemented in C++, Booch illustrates essential concepts, explains the method, and shows successful applications in a variety of fields. Booch also gives pragmatic advice on a host of issues, including classification, implementation strategies, and cost-effective project management. A two-time winner of Software Development's coveted Jolt Cola Product Excellence Award!},
author = {Booch, Grady and Maksimchuk, Robert a. and Engle, Michael W. and Young, Bobbi J. and Conallen, Jim and Houston, Kelli a.},
booktitle = {Chemistry {\&} biodiversity},
doi = {10.1145/1402521.1413138},
isbn = {020189551X},
issn = {14337851},
number = {11},
pages = {720},
title = {{Object-Oriented Analysis and Design with Applications}},
volume = {1},
year = {2007}
}

@book{Beck1999,
abstract = {Kent Beck's eXtreme Programming eXplained provides an intriguing high-level overview of the author's Extreme Programming (XP) software development methodology. Written for IS managers, project leaders, or programmers, this guide provides a glimpse at the principles behind XP and its potential advantages for small- to mid-size software development teams. The book intends to describe what XP is, its guiding principles, and how it works. Simply written, the book avoids case studies and concrete details in demonstrating the efficacy of XP. Instead, it demonstrates how XP relies on simplicity, unit testing, programming in pairs, communal ownership of code, and customer input on software to motivate code improvement during the development process. As the author notes, these principles are not new, but when they're combined their synergy fosters a new and arguably better way to build and maintain software. Throughout the book, the author presents and explains these principles, such as "rapid feedback" and "play to win," which form the basis of XP. Generally speaking, XP changes the way programmers work. The book is good at delineating new roles for programmers and managers who Beck calls "coaches." The most striking characteristic of XP is that programmers work in pairs, and that testing is an intrinsic part of the coding process. In a later section, the author even shows where XP works and where it doesn't and offers suggestions for migrating teams and organizations over to the XP process. In the afterword, the author recounts the experiences that led him to develop and refine XP, an insightful section that should inspire any organization to adopt XP. This book serves as a useful introduction to the philosophy and practice of XP for the manager or programmer who wants a potentially better way to build software. -Richard Dragan Topics covered: Extreme Programming (XP) software methodology, principles, XP team roles, facilities design, testing, refactoring, the XP software lifecycle, and adopting XP. Software development projects can be fun, productive, and even daring. Yet they can consistently deliver value to a business and remain under control. Extreme Programming (XP) was conceived and developed to address the specific needs of software development conducted by small teams in the face of vague and changing requirements. This new lightweight methodology challenges many conventional tenets, including the long-held assumption that the cost of changing a piece of software necessarily rises dramatically over the course of time. XP recognizes that projects have to work to achieve this reduction in cost and exploit the savings once they have been earned. Fundamentals of XP include: Distinguishing between the decisions to be made by business interests and those to be made by project stakeholders. Writing unit tests before programming and keeping all of the tests running at all times. Integrating and testing the whole system-several times a day. Producing all software in pairs, two programmers at one screen. Starting projects with a simple design that constantly evolves to add needed flexibility and remove unneeded complexity. Putting a minimal system into production quickly and growing it in whatever directions prove most valuable. Why is XP so controversial? Some sacred cows don't make the cut in XP: Don't force team members to specialize and become analysts, architects, programmers, testers, and integrators-every XP programmer participates in all of these critical activities every day. Don't conduct complete up-front analysis and design-an XP project starts with a quick analysis of the entire system, and XP programmers continue to make analysis and design decisions throughout development. Develop infrastructure and frameworks as you develop your application, not up-front-delivering business value is the heartbeat that drives XP projects. Don't write and maintain implementation documentation-communication in XP projects occurs face-to-face, or through efficient tests and carefully written code. You may love XP or you may hate it, but Extreme Programming Explained will force you to take a fresh look at how you develop software.},
archivePrefix = {arXiv},
arxivId = {0201616416},
author = {Beck, Kent},
booktitle = {XP Series},
doi = {10.1136/adc.2005.076794},
eprint = {0201616416},
isbn = {0201616416},
issn = {20161641},
number = {c},
pages = {224},
pmid = {17337672},
title = {{Extreme Programming Explained: Embrace Change}},
year = {1999}
}









