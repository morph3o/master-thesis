package de.unimannheim.informatik.swt.simile.services;

import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import lombok.Getter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

public class JavaClassVisitor extends VoidVisitorAdapter {

	@Getter
	private ClassOrInterfaceDeclaration classObj;
	@Getter
	private List<MethodDeclaration> methods = new ArrayList<>();
	@Getter
	private List<String> testClasses = new ArrayList<>();

	/**
	 * If the node visited is a Java class, it checks if it contains
	 * annotation <code>@Test</code>. If true, it is added to test class
	 * list.
	 * */
	@Override
	public void visit(ClassOrInterfaceDeclaration n, Object arg) {
		super.visit(n, arg);
		this.classObj = n;
		if(n.toString().contains("@Test")) {
			testClasses.add(n.toString());
		}
	}

	/**
	 * If the node visited is a method, it is added into <code>methods</code>
	 * list.
	 * */
	@Override
	public void visit(MethodDeclaration n, Object arg) {
		super.visit(n, arg);
		methods.add(n);
	}
}
