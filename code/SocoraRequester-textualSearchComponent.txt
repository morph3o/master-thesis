private void textualSearchComponent(String method) throws IOException, SparkPostException {

		CandidateSearchClient candidateSearchClient = new CandidateSearchClient(baseURI, auth(user, pass));
		CandidateSearchRequest request = new CandidateSearchRequest();

		int maxResults = 10;

		String testClassSourceQuery = method;

		request.setInput(testClassSourceQuery);
		QueryParams queryParams = new QueryParams();
		queryParams.setRows(maxResults);

		queryParams.setArtifactInformation(true);
		queryParams.setContent(true);

		queryParams.setFilters(Arrays.asList(Filters.HASH_CODE_CLONE_FILTER, Filters.NO_ABSTRACT_CLASS_FILTER,
			Filters.NO_INTERFACE_FILTER, Filters.LATEST_VERSION_FILTER, Filters.FUNCTIONAL_SUFFICIENCY_FILTER));
		request.setQueryParams(queryParams);

		// no test-driven search
		request.setTestDrivenSearch(Boolean.FALSE);

		// set ranking
		queryParams.setRankingStrategy(Rankings.SINGLE_OBJECTIVE);

		// set ranking criteria
		List<RankingCriterion> rankingCriteria = Arrays.asList(
			// textual score (Lucene/SolR)
			RankingCriterionBuilder.rankingCriterion().withName("luceneScore").withObjective(RankingCriterion.MAX)
				.build());

		queryParams.setRankingCriteria(rankingCriteria);

		CandidateSearchResponse response = candidateSearchClient.search(request);

		CandidateListResult result = response.getCandidates();

		StringBuffer strBuilder = new StringBuffer();
		strBuilder.append("Result from SOCORA \n");
		strBuilder.append(Strings.repeat("=", "Result from SOCORA".length()));
		strBuilder.append("\n");

		// all rows
		result.getCandidates().stream().sorted(new SocoraRequester.SortByRank(queryParams.getRankingStrategy(), true)).forEach(doc -> {
			LOG.debug("Rank " + getRank(doc.getRanking(), queryParams.getRankingStrategy(), false) + "/"
				+ getRank(doc.getRanking(), queryParams.getRankingStrategy(), true) + ": " + doc.getFQName() + " "
				+ doc.getUri() + ". Safe ranking criteria ? "
				+ doc.getSafeRankingCriteria().get(queryParams.getRankingStrategy()) + " . Metrics: "
				+ prettify(doc.getMetrics(), queryParams.getRankingCriteria()) + ". Artifact Info = "
				+ ToStringBuilder.reflectionToString(doc.getArtifactInfo()));
			strBuilder.append(String.format("- %s \n", ToStringBuilder.reflectionToString(doc.getArtifactInfo())));
		});
		strBuilder.append(Strings.repeat("=", "Result from SOCORA".length()));
		LOG.debug("Total size " + result.getTotal());
		String[] recipients = {"pdivasto@gmail.com"};

		emailSender.sendEmail(recipients, strBuilder.toString());
	}
